import cv2
import numpy as np
import pandas as pd
import os
from google.colab import drive


# STEP 0: Mount Google Drive

drive.mount('/content/drive')

# Path to your folder containing OMR images in Google Drive
image_folder = "/content/drive/MyDrive/OMR_images"  # <-- change this to your folder


# STEP 1: Load Answer Key from Google Sheets

url = "https://docs.google.com/spreadsheets/d/1KwduvEwUh9hmebw-HelbCZHPvjbOuOTphHdIX79I-yU/export?format=xlsx"
answer_key = pd.read_excel(url, sheet_name="Set - B", engine="openpyxl")

# Check columns
print("Columns in Answer Key:", answer_key.columns)

# Convert answer key into dictionaries
correct_answers = dict(zip(answer_key["Q"], answer_key["Answer"]))
subject_mapping = dict(zip(answer_key["Q"], answer_key["Subject"]))


# STEP 2: Preprocess image

def preprocess_image(img_path):
    img = cv2.imread(img_path)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    _, thresh = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
    return thresh


# STEP 3: Check if bubble is filled

def is_filled(region, threshold=0.5):
    total_pixels = region.size
    filled_pixels = cv2.countNonZero(region)
    fill_ratio = filled_pixels / total_pixels
    return fill_ratio > threshold


# STEP 4: Extract answers from an OMR image

def extract_answers(img_path):
    img = preprocess_image(img_path)

    # TODO: Update these coordinates according to your OMR layout
    bubble_positions = {
        1: [(50, 100, 30, 30), (100, 100, 30, 30), (150, 100, 30, 30), (200, 100, 30, 30)],  # Q1 A/B/C/D
        2: [(50, 150, 30, 30), (100, 150, 30, 30), (150, 150, 30, 30), (200, 150, 30, 30)],  # Q2
        3: [(50, 200, 30, 30), (100, 200, 30, 30), (150, 200, 30, 30), (200, 200, 30, 30)],  # Q3
    }

    answers = {}
    for q, positions in bubble_positions.items():
        selected = None
        for idx, (x, y, w, h) in enumerate(positions):
            bubble = img[y:y+h, x:x+w]
            if is_filled(bubble):
                selected = chr(65 + idx)  # A, B, C, D
        answers[q] = selected
    return answers


# STEP 5: Evaluate a studentâ€™s answers

def evaluate(student_answers):
    score = {sub: 0 for sub in set(subject_mapping.values())}
    for q, ans in student_answers.items():
        if ans == correct_answers.get(q):
            score[subject_mapping[q]] += 1
    score["Total"] = sum(score.values())
    return score


# STEP 6: Process all images from Google Drive folder

results = []

for img_file in os.listdir(image_folder):
    if img_file.lower().endswith((".jpg", ".jpeg", ".png")):
        path = os.path.join(image_folder, img_file)
        student_answers = extract_answers(path)
        scores = evaluate(student_answers)
        scores["Student"] = img_file
        results.append(scores)


# STEP 7: Save results

df_results = pd.DataFrame(results)
df_results.to_excel("final_scores.xlsx", index=False)
print(" Evaluation complete. Results saved to final_scores.xlsx")
